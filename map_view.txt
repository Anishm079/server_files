import { Close } from "@mui/icons-material";
import CheckBoxIcon from "@mui/icons-material/CheckBox";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import FmdGoodIcon from "@mui/icons-material/FmdGood";
import SearchIcon from "@mui/icons-material/Search";
import VisibilityIcon from "@mui/icons-material/Visibility";
import {
  Checkbox,
  Dialog,
  DialogContent,
  DialogTitle,
  Grid,
  IconButton,
  MenuItem,
  Skeleton,
  TextField,
} from "@mui/material";
import Autocomplete, { createFilterOptions } from "@mui/material/Autocomplete";
import CircularProgress from "@mui/material/CircularProgress";
import {
  Circle,
  DirectionsRenderer,
  GoogleMap,
  InfoWindow,
  LoadScript,
  Marker,
  MarkerClusterer,
} from "@react-google-maps/api";
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { getGeocode, getLatLng } from "use-places-autocomplete";
import { mapMarkers } from "../../Constants/icons";
import { getAllLocations } from "../../api";
import { capitalize } from "../../utility/Formater";
import DirectionSummery from "./DirectionSummery";
import moment from "moment";

const filter = createFilterOptions();
const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
const checkedIcon = <CheckBoxIcon fontSize="small" />;

const gpsStatus = {
  1: "moving",
  2: "idle i,e ignition is on and speed <= 7km/hr",
  3: "stopped i,e engine is off",
  4: "towing i,e ignition is off, but vehicle speed",
  5: "no data i,e no communication of device with intouch server or no GPRS signal",
  6: "power off",
  7: "no gps i,e satellite count is less than 4",
  8: "on trip i,e device is currently on an active trip",
  9: "free vehicle i,e device is not on any active trip",
};

function MapView({ open, handleClose }) {
  const [loading, setLoading] = useState(false);
  const [locations, setLocations] = useState([]);
  const [filterLocations, setFilterLocations] = useState([]);
  const [filterData, setFilterData] = useState([]);
  const [formatedData, setFormatedData] = useState([]);
  const [stateFilter, setStateFilter] = useState(null);
  const [cityFilter, setCityFilter] = useState(null);
  const [pinPointsFilter, setPinPointsFilter] = useState([]);
  const [searchData, setSearchData] = useState([]);
  const [searchLocation, setSearchLocation] = useState(null);
  const [route, setRoute] = useState(null);
  const [map, setMap] = useState(null);
  const [directions, setDirections] = useState({
    A: { lat: null, lng: null },
    B: { lat: null, lng: null },
  });
  const [mapCenter, setMapCenter] = useState({ lat: 21.0, lng: 78.0 });
  const [gpsLoading, setGpsLoading] = useState(false);
  const [directionSummery, setDirectionSummery] = useState(null);
  const [zoom, setZoom] = useState(5);

  function handleSearch(locationData) {
    try {
      console.log(locationData,stateFilter,cityFilter);
      handleFilterLocations(locationData,stateFilter,cityFilter);
      map?.setZoom(30);
      map?.panTo(locationData?.location);
      setSearchLocation(locationData);
      setMapCenter(locationData?.location);
    } catch (error) {
      toast.error(
        error?.response?.data?.message || error?.message || "failed to search!"
      );
    } finally {
    }
  }

  async function handleLocationFocus(address, zoom, filter_type) {
    try {
      if (map) {
        const results = await getGeocode({ address });
        const location = await getLatLng(results[0]);
        const { lat, lng } = location;
        map?.setZoom(zoom);
        map?.panTo({ lat, lng });
        setMapCenter({ lat, lng });
      }
    } catch (error) {
      toast.error(
        error?.response?.data?.message ||
          error?.message ||
          "failed to focus on location"
      );
    }
  }

  function handleFilterLocations(searchEle,state,city){
    let filtered_data = locations;
    //gether dealers with same state and city
    //filter agent and customers based on dealers id
    //dump into the filter data
    console.log(searchEle,state,city);
    //state and city wise filter
    const dealer_ids = filtered_data?.filter(loc=>{
      let valid=loc?.user_type==="dealer";
      if(state){
        valid = loc?.state===state;
      }
      if(city){
        valid = loc?.city===city;
      }
      return valid;
    });

    console.log("dealer ids => ",dealer_ids);

    //dealers wise filter
    filtered_data = filtered_data?.filter(loc=>{
      if(loc?.user_type === "agent"){
        return dealer_ids?.some(dealer=>{
          return loc?.dealer_ids?.some(itm=>itm===dealer?.dealer_id);
        })
      }
      return dealer_ids.some(itm=>itm?.dealer_id === loc?.dealer_id);
    });

    //search wise filter
    // console.log("search => ",filtered_data);
    // if(searchEle){//searchLoacation?.id
      // filtered_data = filtered_data?.filter(loc=>{
      //   if(loc?.user_type === "agent"){
      //     return loc?.dealer_ids?.some(itm=>itm===searchEle?.dealer_id);
      //   }
      //   return dealer_ids.some(itm=>itm?.dealer_id === loc?.dealer_id);
      // });
    // }

    setFilterLocations(filtered_data);
  } 

  const calculateDirections = async ({ from, to }) => {
    try {
      if (!from || !to) {
        toast.error("Missing origin or destination for directions");
        return;
      }
      const directionsService = new window.google.maps.DirectionsService();
      const travelMode = window.google.maps.TravelMode.DRIVING;
      const directionsRequest = {
        origin: new window.google.maps.LatLng(from.lat, from.lng),
        destination: new window.google.maps.LatLng(to.lat, to.lng),
        travelMode, // Adjust travel mode as needed (driving, walking, bicycling)
      };
      const response = await directionsService.route(directionsRequest);
      if (response?.routes) {
        setRoute(response);
        setDirectionSummery({
          distance: response?.routes?.[0]?.legs?.[0]?.distance?.text,
          duration: response?.routes?.[0]?.legs?.[0]?.duration?.text,
        });
      }
    } catch (error) {
      toast?.error(error?.message);
    }
  };

  async function fetchGPSData() {
    try {
      setGpsLoading(true);
      const { data } = await getAllLocations("filter=gps");
      let result = {
        gps_locations: data?.data || [],
      };

      let { locations = [], search_options = [] } = formateLocations(
        result || {}
      );

      setFormatedData((prev) => {
        if (!prev?.locations) {
          prev.locations = [];
        }
        if (!prev?.search_options) {
          prev.search_options = [];
        }
        prev.locations = prev.locations.concat(locations);
        prev.search_options = prev.search_options.concat(search_options);
        return {
          ...prev,
        };
      });
      setLocations((prev) => [...(prev || []), ...(locations || [])]);
      setFilterLocations(prev=>([...(prev || []), ...(locations || [])]));
      setSearchData((prev) => [...(prev || []), ...(search_options || [])]);
    } catch (error) {
      toast.error(
        error?.response?.data?.message || error?.message || "failed to search!"
      );
    } finally {
      setGpsLoading(false);
    }
  }

  async function fetchAllLocations() {
    try {
      setLoading(true);
      let result = {
        agent_locations: [],
        dealer_locations: [],
        customer_locations: [],
        gps_locations: [],
      };
      let params = ["customer", "dealer", "agent"];
      const customer_locations = JSON.parse(
        sessionStorage.getItem("customer_locations")
      );
      if (customer_locations) {
        result = {
          ...result,
          customer_locations,
        };
        params = params.filter((itm) => itm !== "customer");
      }
      const dealer_locations = JSON.parse(
        sessionStorage.getItem("dealer_locations")
      );
      if (dealer_locations) {
        result = {
          ...result,
          dealer_locations,
        };
        params = params.filter((itm) => itm !== "dealer");
      }
      fetchGPSData();
      const promises = [];
      for (let filter of params) {
        promises.push(getAllLocations(`filter=${filter}`));
      }

      const response = await Promise.all(promises);

      for (let i = 0; i < response.length; i++) {
        const data = response?.[i]?.data?.data;
        result[`${params[i]}_locations`] = data || [];
        if (["dealer", "customer"].includes(params[i])) {
          sessionStorage.setItem(
            `${params[i]}_locations`,
            JSON.stringify(data)
          );
        }
      }
      const formated_data = formateLocations(result || {});
      setFormatedData(formated_data);
      setLocations(formated_data?.locations || []);
      setFilterLocations(formated_data?.locations || []);
      setFilterData(formated_data?.filters || []);
      setSearchData(formated_data?.search_options || []);
    } catch (error) {
      toast.error(
        error?.response?.data?.message || error?.message || "failed to search!"
      );
    } finally {
      setLoading(false);
    }
  }

  function handleFullScreenDistance() {
    if (route && directionSummery && document.fullscreenElement) {
      document.fullscreenElement.id = "full-screen-element";
      const div1 = document.createElement("div");
      div1.className =
        "position-absolute bottom-0 left-0 bg-white text-dark border rounded m-2 px-2 full-screen-child";
      div1.style.zIndex = 1000003;
      div1.style.width = "40%";
      const div2 = document.createElement("div");
      div2.className = "d-flex flex-column fs-6 fw-semibold m-2";
      const div3 = document.createElement("div");
      div3.className =
        "d-flex flex-row align-items-center justify-content-between";
      const div4 = document.createElement("div");
      div4.className = "d-flex flex-column align-items-start";

      const span1 = document.createElement("span");
      span1.className = "fs-6 fw-normal text-capitalize";
      span1.innerText = `Distance: ${directionSummery?.distance}  |  Duration: ${directionSummery?.duration}  |  Mode : Driving`;
      const span2 = document.createElement("span");
      span2.className = "py-1";
      span2.innerText = `Location A: ${
        directions?.A?.name +
        " ( " +
        (directions?.A?.user_type || "agent") +
        " ) "
      }`;
      const span3 = document.createElement("span");
      span3.innerText = `Location B: ${
        directions?.B?.name +
        " ( " +
        (directions?.B?.user_type || "agent") +
        " ) "
      }`;

      const button = document.createElement("button");
      button.className =
        "mt-2 rounded-pill btn btn-primary bg-primary shadow-lg fw-semibold";
      button.innerText = "Reset";
      button.addEventListener("click", (e) => {
        let child = document.getElementsByClassName("full-screen-child");
        if (child) {
          Array.from(child).map((itm) => itm.remove());
        }
        setRoute(null);
        setDirections({ A: null, B: null });
        setDirectionSummery(null);
      });

      div4.appendChild(span2);
      div4.appendChild(span3);
      div3.appendChild(div4);
      div3.appendChild(button);
      div2.appendChild(div3);
      div2.appendChild(span1);
      div1.appendChild(div2);
      document.fullscreenElement.appendChild(div1);
    }
  }

  const handleFullScreenChange = () => {
    if (!document.fullscreenElement) {
      let child = document.getElementsByClassName("full-screen-child");
      if (child) {
        Array.from(child).map((itm) => itm.remove());
      }
      setRoute(null);
      setDirections({ A: null, B: null });
      setDirectionSummery(null);
    } else {
      handleFullScreenDistance();
    }
  };

  function handleZoomChange() {
    if (map) setZoom(map.getZoom());
  }

  useEffect(() => {
    handleFullScreenDistance();
  }, [directionSummery]);

  useEffect(() => {
    if (pinPointsFilter?.length) {//need to handle pinpoints
      setLocations(
        formatedData?.locations?.filter((itm) => {
          return pinPointsFilter?.includes(itm?.user_type);
        })
      );
    } else {
      setLocations([...(formatedData?.locations || [])]);
    }
  }, [pinPointsFilter]);

  useEffect(() => {
    if (
      map &&
      directions?.A?.lat &&
      directions?.A?.lng &&
      directions?.B?.lat &&
      directions?.B?.lng
    ) {
      calculateDirections({ from: directions?.A, to: directions?.B });
    } else {
      setRoute(null);
    }
  }, [directions]);

  useEffect(() => {
    if (open) {
      document.addEventListener("fullscreenchange", handleFullScreenChange);
      document.addEventListener(
        "webkitfullscreenchange",
        handleFullScreenChange
      );

      setMapCenter({ lat: 21.0, lng: 78.0 });
      fetchAllLocations();

      return () => {
        document.removeEventListener(
          "fullscreenchange",
          handleFullScreenChange
        );
        document.removeEventListener(
          "webkitfullscreenchange",
          handleFullScreenChange
        );
      };
    }
  }, [open]);

  let { REACT_APP_MAP_KEY } = process.env;

  return (
    <Dialog maxWidth={"lg"} fullWidth open={open} onClose={handleClose}>
      <DialogTitle>
        <div className="d-flex flex-row align-items-center justify-content-start">
          <SearchComponent locations={searchData} value={searchLocation} onSubmit={handleSearch} />
          <CustomAutoComplete
            label="State"
            value={stateFilter}
            onChange={(event, newValue) => {
              newValue && handleLocationFocus(newValue, 7,"state");
              setStateFilter(newValue);
              setCityFilter(null);
              setSearchLocation(null);
              handleFilterLocations(null,newValue,null);
            }}
            objKey={"state"}
            dropdownOptions={filterData}
          />
          <CustomAutoComplete
            label="City"
            value={cityFilter}
            onChange={(event, newValue) => {
              setCityFilter(newValue);
              setSearchLocation(null);
              handleLocationFocus(newValue + ", " + stateFilter, 13,"city");
              handleFilterLocations(null,stateFilter,newValue);
            }}
            objKey={"city"}
            dropdownOptions={filterData?.filter((itm) =>
              stateFilter ? stateFilter === itm?.state : false
            )}
          />
          <PinPointsComponent
            onChange={(value) => {
              setPinPointsFilter(value);
            }}
          />
        </div>
      </DialogTitle>
      <IconButton
        className="position-absolute top-0 end-0 m-1"
        onClick={handleClose}
      >
        <Close />
      </IconButton>
      <DialogContent sx={{ height: 800 }}>
        <Grid container spacing={2} className="h-100">
          <Grid item xs={12} sm={12} className="h-100">
            <div className="border h-100 d-flex flex-column align-items-start position-relative">
              <LoadScript
                googleMapsApiKey={REACT_APP_MAP_KEY}
                libraries={["routes", "places"]}
                loadingElement={
                  <Skeleton
                    variant="rectangular"
                    width={"100%"}
                    height={"100%"}
                  />
                }
              >
                <GoogleMap
                  mapContainerStyle={{ width: "100%", height: "100%" }}
                  center={mapCenter}
                  zoom={zoom}
                  onZoomChanged={handleZoomChange}
                  onLoad={(map) => setMap(map)}
                  streetView={true}
                >
                  {!route && zoom >= 3 && (
                    <MarkersComponent
                      locations={filterLocations}
                      setDirections={setDirections}
                      directions={directions}
                      map={map}
                    />
                  )}
                  {route && (
                    <DirectionsRenderer
                      options={{
                        directions: route,
                        suppressMarkers: true,
                      }}
                    />
                  )}
                  {route && directions?.A && directions?.B && (
                    <MarkersComponent
                      locations={Object.keys(directions)?.map((key) => ({
                        ...directions[key],
                        label: key,
                      }))}
                      setDirections={setDirections}
                      directions={directions}
                      map={map}
                    />
                  )}
                  {route && directionSummery && (
                    <DirectionSummery
                      handleReset={() => {
                        setDirectionSummery(null);
                        setRoute(null);
                        setDirections({ A: null, B: null });
                      }}
                      directionSummery={directionSummery}
                      directionData={directions}
                      width={"50%"}
                    />
                  )}
                </GoogleMap>
              </LoadScript>
              {loading && (
                <div className="h-100 w-100 z-2 bg-secondary bg-opacity-50 position-absolute d-flex flex-column align-items-center justify-content-center">
                  <svg width={0} height={0}>
                    <defs>
                      <linearGradient
                        id="my_gradient"
                        x1="0%"
                        y1="0%"
                        x2="0%"
                        y2="100%"
                      >
                        <stop offset="0%" stopColor="#e01cd5" />
                        <stop offset="100%" stopColor="#1CB5E0" />
                      </linearGradient>
                    </defs>
                  </svg>
                  <CircularProgress
                    size={60}
                    thickness={5}
                    sx={{ "svg circle": { stroke: "url(#my_gradient)" } }}
                  />
                </div>
              )}
              {gpsLoading && (
                <div className="z-2 bg-secondary bg-opacity-75 bottom-0 left-0 p-3 position-absolute d-flex flex-row align-items-center justify-content-center">
                  <svg width={0} height={0}>
                    <defs>
                      <linearGradient
                        id="my_gradient"
                        x1="0%"
                        y1="0%"
                        x2="0%"
                        y2="100%"
                      >
                        <stop offset="0%" stopColor="#e01cd5" />
                        <stop offset="100%" stopColor="#1CB5E0" />
                      </linearGradient>
                    </defs>
                  </svg>
                  <CircularProgress
                    size={40}
                    thickness={4}
                    sx={{ "svg circle": { stroke: "url(#my_gradient)" } }}
                  />
                  <span className="fs-5 fw-bold text-white ms-4">
                    Loading GPS Locations...
                  </span>
                </div>
              )}
            </div>
          </Grid>
        </Grid>
      </DialogContent>
    </Dialog>
  );
}

export default MapView;

const SearchComponent = ({ locations, value, onSubmit }) => {
  const [searchTxt, setSearchTxt] = useState(null);
  const [optIdx, setOptIdx] = useState(-1);
  const [filterData, setFilterData] = useState([]);
  const [openDropBox, setOpenDropBox] = useState(false);

  useEffect(() => {
    if (Boolean(searchTxt)) {
      let text = searchTxt?.toLowerCase();
      setFilterData(
        locations?.filter((item) => item?.opt?.toLowerCase()?.includes(text))
      );
    } else {
      setFilterData(null);
    }
  }, [searchTxt]);

  useEffect(()=>{
    if(!value) setSearchTxt(null);
  },[value]);

  return (
    <div
      style={{ width: 400 }}
      className="position-relative me-4 d-flex flex-column"
    >
      <TextField
        className="search-bar-table rounded-pill"
        id="input-with-icon-textfield"
        placeholder="Search"
        variant="standard"
        fullWidth
        InputProps={{
          startAdornment: <SearchIcon sx={{ color: "gray" }} />,
          disableUnderline: true,
          style: { color: "black", fontWeight: 400, height: 25 },
        }}
        onKeyDown={(e) => {
          if (e.key === "ArrowDown") {
            setOptIdx((prev) =>
              filterData?.length - 1 === prev ? 0 : prev + 1
            );
          }
          if (e.key === "ArrowUp") {
            setOptIdx((prev) =>
              prev === 0 ? filterData?.length - 1 : prev - 1
            );
          }
          if (e.key === "Enter") {
            setSearchTxt(filterData?.[optIdx]?.opt);
            setOpenDropBox(false);
            onSubmit(filterData?.[optIdx]);
          }
        }}
        onFocus={(e)=>{
          setOpenDropBox(true);
        }}
        onBlur={(e)=>{
          setOpenDropBox(false);
        }}
        value={searchTxt}
        onChange={(e) => {
          setOptIdx(-1);
          setSearchTxt(e.target.value);
        }}
      />
      <div
        className="position-absolute mt-5 z-2 bg-white shadow overflow-auto"
        style={{ maxHeight: 500, width: "100%" }}
        autoFocus={optIdx !== -1}
      >
        {openDropBox &&
          filterData?.map((itm, idx) => {
            return (
              <MenuItem
                key={idx}
                selected={idx === optIdx}
                className={
                  idx === optIdx ? `bg-primary bg-gradient bg-opacity-25` : ""
                }
                onKeyDown={(e) => {
                  if (e.key === "ArrowDown") {
                    setOptIdx((prev) =>
                      filterData?.length - 1 === prev ? 0 : prev + 1
                    );
                  }
                  if (e.key === "ArrowUp") {
                    setOptIdx((prev) =>
                      filterData?.length === 1
                        ? filterData?.length - 1
                        : prev - 1
                    );
                  }
                  if (e.key === "Enter") {
                    setSearchTxt(itm?.opt);
                    setOpenDropBox(false);
                    onSubmit(itm);
                  }
                }}
                onClick={() => {
                  setSearchTxt(itm?.opt);
                  onSubmit(itm);
                }}
              >
                {itm?.opt}
              </MenuItem>
            );
          })}
      </div>
    </div>
  );
};

const CustomAutoComplete = ({
  label,
  value,
  onChange,
  dropdownOptions = {},
  objKey,
}) => {
  let arr = new Set();
  dropdownOptions?.map((itm) => {
    if (itm?.[objKey]) arr.add(itm?.[objKey]);
    return;
  });
  return (
    <Autocomplete
      className="me-4"
      size="small"
      value={value}
      onChange={onChange}
      filterOptions={(options, params) => {
        const filtered = filter(options, params);
        return filtered;
      }}
      selectOnFocus
      clearOnBlur
      handleHomeEndKeys
      id="free-solo-with-text-demo"
      options={[...arr]}
      getOptionLabel={(option) => option}
      renderOption={(props, option) => <li {...props}>{option}</li>}
      sx={{ width: 300 }}
      freeSolo
      renderInput={(params) => (
        <TextField {...params} size="small" label={label} />
      )}
    />
  );
};

const PinPointsComponent = ({ onChange }) => {
  const [value, setValue] = useState([]);
  const options = [
    {
      title: "Dealers",
      color: "#4296FF",
      value: "dealer",
    },
    {
      title: "Customers FI Location",
      color: "#7F27FF",
      value: "customer",
    },
    {
      title: "Agents Last Location",
      color: "#F76D57",
      value: "agent",
    },
    {
      title: "Vehicle Last Location",
      color: "#37eb34",
      value: "gps",
      locationIcon: mapMarkers["gps"],
    },
  ];

  return (
    <Autocomplete
      multiple
      id="checkboxes-tags-demo multiple-limit-tags"
      className="me-4"
      size="small"
      options={options}
      limitTags={1}
      value={value}
      onChange={(event, values) => {
        setValue(values);
        onChange(values?.map((itm) => itm?.value));
      }}
      disableCloseOnSelect
      isOptionEqualToValue={(option, value) => option.value === value.value}
      getOptionLabel={(option) => option?.title}
      renderOption={(props, option, { selected }) => {
        const { locationIcon } = option;
        return (
          <li {...props} className="text-capitalize">
            <Checkbox
              icon={icon}
              checkedIcon={checkedIcon}
              style={{ marginRight: 8 }}
              checked={selected}
            />
            {locationIcon ? (
              <img src={locationIcon} width={25} height={20} />
            ) : (
              <FmdGoodIcon sx={{ color: option?.color }} />
            )}
            {" " + option?.title}
          </li>
        );
      }}
      style={{ width: 300 }}
      renderInput={(params) => <TextField {...params} label="PinPoints" />}
    />
  );
};

const MarkersComponent = ({
  locations = [],
  setDirections,
  directions,
  map,
}) => {
  const [selectedMarker, setSelectedMarker] = useState(null);

  let zoom = 0;
  if (map) {
    zoom = map.getZoom();
  }

  function handleMarkerClick(location) {
    if (map) {
      map.panTo(new window.google.maps.LatLng(location.lat, location.lng));
    }
    setSelectedMarker((prev) => {
      if (location?.lat === prev?.lat && location?.lng === prev?.lng) {
        return null;
      }
      return location;
    });
  }

  function handleBtnClick(btn_type, markerData, isMarked) {
    if (btn_type == "A")
      setDirections((prev) => ({ ...prev, A: isMarked ? null : markerData }));
    if (btn_type == "B")
      setDirections((prev) => ({ ...prev, B: isMarked ? null : markerData }));
  }

  const zMap = {
    agent: 3,
    dealer: 2,
    customer: 1,
    gps: 1,
  };

  useEffect(() => {
    setSelectedMarker(null);
  }, [locations]);

  return (
    <MarkerClusterer>
      {(clusterer) => [
        ...locations?.map((location, index) => {
          // let isAnimated = false;
          // if (
          //   location?.user_type !== "agent" &&
          //   selectedMarker?.user_type === "agent"
          // ) {
          //   const distance = calculateDistanceBtnLanLng(
          //     location?.lng,
          //     location?.lat,
          //     selectedMarker?.lng,
          //     selectedMarker?.lat
          //   );
          //   isAnimated = distance <= 10;
          // }
          return (
            <Marker
              key={index}
              zIndex={zMap[location?.user_type]}
              position={{ lat: location.lat, lng: location.lng }}
              onClick={() => {
                handleMarkerClick(location);
              }}
              icon={{ url: mapMarkers[location?.user_type] }}
              label={
                location?.label
                  ? {
                      text: location?.label,
                      color: "white",
                      fontSize: "16px",
                      fontWeight: "bold",
                    }
                  : null
              }
              // animation={isAnimated ? window.google.maps.Animation.BOUNCE : null}
            >
              {selectedMarker?.lat === location?.lat &&
                selectedMarker?.lng === location?.lng && (
                  <InfoWindow
                    position={selectedMarker.position}
                    onCloseClick={() => setSelectedMarker(null)}
                    options={{ disableAutoPan: true }}
                  >
                    <InfoBox
                      markerData={selectedMarker}
                      onClick={handleBtnClick}
                      directions={directions}
                    />
                  </InfoWindow>
                )}
              {location?.user_type === "agent" && zoom < 14 && (
                <Circle
                  center={{ lat: location?.lat, lng: location?.lng }}
                  radius={10000} // Radius in meters (10km)
                  options={{
                    strokeColor: "#4285F4",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#4285F4",
                    fillOpacity: 0.35,
                  }}
                />
              )}
            </Marker>
          );
        }),
      ]}
    </MarkerClusterer>
  );
};

const InfoBox = ({ markerData, onClick, directions }) => {
  const id =
    markerData?.application_id ??
    markerData?.dealer_id ??
    markerData?.agent_code;
  let name = markerData?.name;
  if (name) {
    name = capitalize(name);
  }
  const type = markerData?.location_type ?? null;
  const user_type = markerData?.user_type ?? "agent";

  let markerASelected =
    markerData?.lat === directions?.A?.lat &&
    markerData?.lng === directions?.A?.lng;
  let markerBSelected =
    markerData?.lat === directions?.B?.lat &&
    markerData?.lng === directions?.B?.lng;

  const navigate = useNavigate();

  function handleRedirect(user_type, id) {
    if (user_type === "customer" || user_type === "gps") {
      navigate(`/view-application/${id}`);
      return;
    }
    if (user_type === "dealer") {
      navigate(`/update-anchor-v2/${id}`);
      return;
    }

    if (user_type === "agent") {
      navigate(`/update-agent/${id}`);
      return;
    }
  }

  return (
    <div className="p-2 w-100 d-flex flex-column align-items-start justify-content-center">
      <div className="d-flex flex-column w-100">
        <span className="fw-normal">{capitalize(user_type)}'s Location</span>
        <hr className="m-0 p-0" />
        <span className="fw-semibold mt-1 d-flex flex-row align-items-center justify-content-between">
          <span>Name:</span>
          <span>{name}</span>
        </span>
        <span className="fw-medium d-flex flex-row align-items-center justify-content-between">
          <span>ID:</span>
          <span>{id}</span>
        </span>
        <span className="fw-medium d-flex flex-row align-items-center justify-content-between">
          <span>Mobile No.:</span>
          <span>{markerData?.mobile_number}</span>
        </span>
        {markerData?.updated_at && (
          <span className="fw-medium d-flex flex-row align-items-center justify-content-between">
            <span>Updated At:</span>
            <span>{moment(markerData?.updated_at).format("hh:mm:ss A")}</span>
          </span>
        )}
        {type && (
          <span className="fw-medium d-flex flex-row align-items-center justify-content-between">
            <span>Location Type:</span>
            <span>{capitalize(type, "_")}</span>
          </span>
        )}
        {markerData?.status && (
          <span className="fw-medium d-flex flex-row align-items-center justify-content-between">
            <span>Status:</span>
            <span>{capitalize(gpsStatus?.[markerData?.status], "_")}</span>
          </span>
        )}
      </div>
      <div
        className="mt-3 w-100 d-flex flex-row align-items-center"
        style={{ width: 100 }}
      >
        <IconButton
          color="secondary"
          title="view details"
          className="border me-2"
          onClick={() => {
            handleRedirect(user_type, id);
          }}
        >
          <VisibilityIcon sx={{ fontSize: 12 }} />
        </IconButton>
        <IconButton
          color="secondary"
          sx={{ fontSize: 10, width: 30, height: 30 }}
          title="show direction"
          className={`border me-2 ${
            markerASelected && "bg-primary text-white"
          }`}
          onClick={() => {
            onClick("A", markerData, markerASelected);
          }}
        >
          A
        </IconButton>
        <IconButton
          color="secondary"
          sx={{ fontSize: 10, width: 30, height: 30 }}
          title="show direction"
          className={`border me-2 ${
            markerBSelected && "bg-primary text-white"
          }`}
          onClick={() => {
            onClick("B", markerData, markerBSelected);
          }}
        >
          B
        </IconButton>
        <IconButton
          color="primary"
          title="copy location link"
          className="border"
          onClick={() => {
            navigator.clipboard.writeText(
              `https://www.google.com/maps/search/${markerData?.lat},${markerData?.lng}`
            );
            toast("Location Link Copied!");
          }}
        >
          <ContentCopyIcon
            sx={{ transform: "rotateY(180deg)", fontSize: 12 }}
          />
        </IconButton>
      </div>
    </div>
  );
};

function formateLocations(data) {
  const {
    agent_locations = [],
    dealer_locations = [],
    customer_locations = [],
    gps_locations = [],
  } = data;

  let agent_locs = [];
  let search_options = [];
  for (let agent_location of agent_locations) {
    if (
      agent_location?.live_locations?.long &&
      agent_location?.live_locations?.lat
    ) {
      agent_locs.push({
        user_type: "agent",
        agent_code: agent_location?.agent_code,
        dealer_id:agent_location?.anchors,
        name: agent_location?.name,
        mobile_number: agent_location?.mobile_number?.[0],
        updated_at: agent_location?.live_locations?.dateMS,
        lat: agent_location?.live_locations?.lat,
        lng: agent_location?.live_locations?.long,
      });
      search_options = search_options.concat([
        {
          opt: agent_location?.agent_code + " - agent",
          id:agent_location?.agent_code,
          dealer_id:agent_location?.anchors,
          location: {
            lat: agent_location?.live_locations?.lat,
            lng: agent_location?.live_locations?.long,
          },
        },
        {
          opt: agent_location?.name + " - agent",
          id:agent_location?.agent_code,
          dealer_id:agent_location?.anchors,
          location: {
            lat: agent_location?.live_locations?.lat,
            lng: agent_location?.live_locations?.long,
          },
        },
      ]);
    }
  }
  let dealer_locs = [];
  let filters = [];

  for (let dealer_location of dealer_locations) {
    for (let location of dealer_location?.locations || []) {
      if (location?.lat && location?.lng) {
        dealer_locs.push({
          user_type: "dealer",
          name: dealer_location?.dealership_name,
          dealer_id: dealer_location?.anchor_id,
          city: location?.city,
          state: location?.state,
          lat: location.lat,
          lng: location.lng,
          mobile_number:
            location?.rm_details?.[location?.mobile_number?.length - 1 || 0]
              ?.mobile,
        });

        filters.push({
          city: location?.city,
          state: location?.state,
          pincode: location?.pincode,
          country: location?.country,
        });

        search_options = search_options.concat([
          {
            opt: dealer_location?.dealership_name + " - " + location?.city,
            id:dealer_location?.anchor_id,
            dealer_id: dealer_location?.anchor_id,
            location: {
              lat: location.lat,
              lng: location.lng,
            },
          },
          {
            opt: dealer_location?.anchor_id + " - " + location?.city,
            id:dealer_location?.anchor_id,
            dealer_id: dealer_location?.anchor_id,
            location: {
              lat: location.lat,
              lng: location.lng,
            },
          },
        ]);
      }
    }
  }

  let customer_locs = [];

  for (let customer_location of customer_locations) {
    if (
      customer_location?.fi_location?.lat &&
      customer_location?.fi_location?.lng
    ) {
      customer_locs.push({
        user_type: "customer",
        name: customer_location?.customer_name,
        application_id: customer_location?.application_id,
        dealer_id:customer_location?.anchor_id,
        mobile_number: customer_location?.mobile_number,
        ...customer_location.fi_location,
      });

      search_options = search_options.concat([
        {
          opt: customer_location?.customer_name,
          id:customer_location?.application_id,
          dealer_id:customer_location?.anchor_id,
          location: {
            ...customer_location.fi_location,
          },
        },
        {
          opt: customer_location?.application_id,
          id:customer_location?.application_id,
          dealer_id:customer_location?.anchor_id,
          location: {
            ...customer_location.fi_location,
          },
        },
      ]);
    }
  }

  let gps_locs = [];

  for (let gps_location of gps_locations) {
    if (gps_location?.gps_live_data?.lat && gps_location?.gps_live_data?.lng) {
      gps_locs.push({
        user_type: "gps",
        name: gps_location?.customer_name,
        application_id: gps_location?.application_id,
        dealer_id:gps_location?.anchor_id,
        updated_at: gps_location?.gps_live_data?.record_time,
        mobile_number: gps_location?.mobile_number,
        ...gps_location.gps_live_data,
      });

      search_options = search_options.concat([
        {
          opt: gps_location?.customer_name + " - gps",
          id:gps_location?.application_id,
          dealer_id:gps_location?.anchor_id,
          location: {
            lat: gps_location?.gps_live_data?.lat,
            lng: gps_location?.gps_live_data?.lng,
          },
        },
        {
          opt: gps_location?.application_id + " - gps",
          id:gps_location?.application_id,
          dealer_id:gps_location?.anchor_id,
          location: {
            lat: gps_location?.gps_live_data?.lat,
            lng: gps_location?.gps_live_data?.lng,
          },
        },
      ]);
    }
  }

  let locations = agent_locs
    .concat(dealer_locs)
    .concat(customer_locs)
    .concat(gps_locs);
  return { locations, filters, search_options };
}
